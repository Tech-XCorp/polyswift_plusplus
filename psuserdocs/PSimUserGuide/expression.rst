
.. _programming-concepts-scoping-expression-evaluation:

Expression Evaluation
--------------------------

Txpp evaluates expressions by interpreting them as Python expressions.
Python expressions are composed of tokens. A token is a single element
of an expression, such as a constant, identifier, or operation. The
preprocessor breaks the expression string into individual tokens then
performs recursive substitution on each token. Once a token is no longer
found to be substitutable, the preprocessor tries to evaluate it as a
Python expression. The result of this evaluation will then be used as
the value of this token. All the token values are then concatenated and
again evaluated as a Python expression. This result will then be
assigned to the symbol.

*Tokenizing*, the act of breaking a string into tokens, is performed
following the lexical rules of Python. This means that white spaces are
used to delimit tokens, but are otherwise entirely ignored. 

.. note::
   A string within matched quotes is treated as a single token with the
   matching quotes removed.

The input files generated by txpp are sensitive to white spaces; as a 
result, txpp has to re-introduce white spaces in the translation 
process. By default, tokens are joined without any white spaces. 
However, if both tokens are of type string, then a white space is 
introduced. Also, tokens inside an array (delineated by :samp:`[` and 
:samp:`]`) are delimited by a white space. 

See the Python documentation on the official Python website at 
`http://www.python.org <http://www.python.org>`_ for more information 
about Python expressions.
